cls
/*******************************************************************************
TITLE:				legal_basis_NSOs.do

AUTHOR: 			Lucas Kitzmueller

DATE: 				June 12, 2020
			   
DESCRIPTION: 		Takes the "legal basis" column of the scraped UN data as input 
					and identifies for each country the year of the most recent legislation.
					
					If a law was amended, it takes the year of the latest
					amendment.
					
					It also includes dates from the Paris21 database: https://paris21.org/knowledge-database?keyword=&type%5B%5D=Statistical-Legislation-Country-Documents&date-from=&date-to=&page=
					
					It also takes the "brief history" column and assumes that the first date
					refers to the first statistical activity (which may be establishment of the NSO.)
					However, we ended up not using that data.
					
					Data viz for the report is done in R. The graphs generated by this 
					do-file are just exploratory.
					
SSC PROGRAMS: 		egenmore 
					asdoc
					

Coding notes: 	 	Main assumption:
					- 	The highest number between 1800 and 2020 included in the 
						text field on legal basis refers to the year of the latest
						legislation.
					- 	The extracted year was additional checked manually for each 
						country.
						

--------------------------------------------------------------------------------
TABLE OF CONTENTS:
	1. Import and clean "legal basis"
	2. Clean "brief history"
	3. Export data & merge in manual review
	4. Visualize & descriptive stats
	5. Merge in other sources
	6. Visualize & regressions
--------------------------------------------------------------------------------
********************************************************************************/


*********************************************************************************
* FILE PATH: CHANGE DIRECTORY HERE TO RUN DO FILE 
	cd "/Users/lucaskitzmueller/Documents/04_Master/17_World Bank Internship/13_NSO dates/"
	* Assumes scraped UN data is saved in this folder.
	* Also assumes that the following addtional datasets are saved in the data folder:
		* WBGDP.dta
		* SPI_scores_long_labelled.csv
		* ODIN_2016_weighted_transpose.xlsx
		* paris21_dates
		* WDIData.csv
		* WDICountry.csv
*********************************************************************************


*********************************************************************************
* 1. Import and clean data (legal basis)
*********************************************************************************

	* Import
		import excel "data/Copy of AllcountriesUNSTATData.xlsx", sheet("countriesData") firstrow case(lower) clear
	
	* Keep relevant variables
		keep countryname legalbasis briefhistoryandotherrelevant
		
	* Set base year
		local base_year 2016
		* The year that is used from WDI, ODIN, SPI.
	
	*------------------------*
	* Full years (e.g., 1999)
	*------------------------*
	
		* Check for full years in legal basis text field.
			forvalue year = 1800(1)2020 {
				
				qui gen year_`year' = .
				local N = _N

				forvalues i = 1/`N' {
					if ((regexm(legalbasis[`i'],"`year'")) == 1) {
						qui replace year_`year' = `year' in `i'
					}
				}
			}
			
		* Take the latest year. 
			egen year = rowmax(year_*)
		
		* Eyeball if it looks correct.
			order countryname legalbasis year
			* br  // looks fine.
			
		* Drop helper variable
			drop year_*
		
		* Check remaining countries.
			* br if !missing(legalbasis) & year == .

	*------------------------*
	* Short years (e.g., 99)
	*------------------------*
		
		* Some countries have the year not fully spelled out (e.g. 92 instead of 1992).
			* Start from 1950 (smaller numbers tend to not to refer to years)
			
		forvalue year = 50(1)99 {
			qui gen year_short_`year' = .
			local N = _N
			forvalues i = 1/`N' {
				if ((regexm(legalbasis[`i'],"/`year'") | regexm(legalbasis[`i'],"-`year'")) == 1) {
					qui replace year_short_`year' = 19`year' in `i'
				}
			}
		}
		egen year_short = rowmax(year_short_*)
		order countryname legalbasis year year_short 
		* br // looks roughly right
		replace year = year_short if missing(year) // only update if missing as full year is more reliable
		drop year_short_*	 // drop helper variables
			
	*------------------------*
	* Flag some missing data
	*------------------------*
			
		* Code year to missing if legalbasis is missing/empty field.
			replace year = .a if missing(legalbasis)
		
		* Again check remaining countries.
			* br if missing(year) & year != .a
		
		* Check which countries "legal basis" value includes no number at all, and code to missing.
		gen any_number = 0
		forvalues i = 1/`N' {
				if ((regexm(legalbasis[`i'],"[0-9]")) == 1) {
					display "yes"
					qui replace any_number = 1 in `i'
				}
			}	
		replace year = .b if any_number == 0 & year != .a
		
		* Check remaining countries.
			* br if year == .
			replace year = .c if year == . 
			
			* Label variable.
			label define year .a "info on legal basis missing"  ///
							  .b "info on legal basis contains no numbers (follow up)" ///
							  .c "info on legal basis contains no year (follow up)" 
			label values year year
	
	
	*-----------------------------------*
	* Update with data from Paris21.org
	*-----------------------------------*
	
		* Source: https://paris21.org/knowledge-database?keyword=&type%5B%5D=Statistical-Legislation-Country-Documents&date-from=&date-to=&page=
		
		tempfile master
		save `master', replace
		
		* Import
		import excel "data/paris21_dates.xlsx", sheet("Sheet1") firstrow case(lower) allstring clear
		
		* Clean
		forvalue year = 1800(1)2020 {
			qui gen year_`year' = .
			local N = _N
			forvalues i = 1/`N' {
				if ((regexm(stat_legistlation_text[`i'],"`year'")) == 1) {
					qui replace year_`year' = `year' in `i'
				}
			}
		}
		egen year = rowmax(year_*)
		drop year_* // drop helper variables
		capture drop c d e f g h // empty column 
		drop if missing(countryname_paris21) //empty row
		
		* Prep for merging
		rename stat_legistlation_text paris21_stat_legistlation_text
		rename countryname_paris21 countryname_for_merge
		rename year paris21_year
		replace countryname_for_merge = trim(lower(countryname_for_merge)) // for merging
		replace countryname_for_merge = "mauritania" if countryname_for_merge == "mauritanie"
		replace countryname_for_merge = "democratic republic of the congo" if countryname_for_merge == "rdc"
		replace countryname_for_merge = "united states of america" if countryname_for_merge == "usa"
		
		* save
		tempfile paris21
		save `paris21'
		
		* merge
		use `master', clear
		gen countryname_for_merge = trim(lower(countryname))
		
		merge 1:1 countryname_for_merge using `paris21', gen(merge_paris21)
		
			assert merge_paris21 != 2 // used all data from paris21
		
			* reclink countryname using `paris21', idmaster(master_id) idusing(paris_id) gen(myscore)
			* matchit master_id countryname_for_merge using `paris21',  idusing(paris_id) txtusing(countryname) override
		
		* update the year variables
		gen unsd_year = year
		replace year = paris21_year if (missing(year) & !missing(paris21_year)) ///
									   | ((year < paris21_year) & !missing(paris21_year))
									   
	*-----------------------------------*
	* Manually input some years
	*-----------------------------------*
		
		* Find remaining countries
			list countryname if year == .b | year == .c
			br if year == .b | year == .c
		
		* Google search based on info in legalbasis (no additional external search)
			* Rule: If the info on legalbasis includes the number or index of the law,
			* then we include the corresponding year based on a quick google search.
			replace year = 2000 if countryname == "Denmark"
			replace year = 2014 if countryname == "Paraguay" // https://www.dgeec.gov.py/institucion/marcolegal.php
			replace year = 2015 if countryname == "Tonga" // https://www.ilo.org/dyn/natlex/docs/ELECTRONIC/105139/128509/F-811570380/TONG105139.pdf
			replace year = 2001 if countryname == "Equatorial Guinea" // 
			replace year = 2005 if countryname == "Republic of Montenegro"
			replace year = 2003 if countryname == "Bahrain"
			replace year = 2002 if countryname == "Costa Rica" // https://www.inec.cr/sites/default/files/documentos/inec_institucional/marco_legal/6_ley_7839_y_sus_reformas.pdf
			
		* Deactivated code since the info on legal basis not detailed & want to keep threshold consistent across countries
			* replace year = 2001 if countryname == "Venezuela" // http://www.ine.gov.ve/index.php?option=com_content&view=article&id=1444:ley-de-la-funcion-publica-de-estadistica-9-de-noviembre&catid=154:efemerides
			* replace year = 2001 if countryname == "Sweden" // https://www.scb.se/en/About-us/official-statistics-of-sweden/
			* replace year = 2001 if countryname == "Slovenia" // https://www.stat.si/statweb/en/AboutUs/History
			* replace year = 2013 if countryname == "Maldives" // http://statisticsmaldives.gov.mv/nbs/wp-content/uploads/2015/09/Dhivehiraajeyge_Thafaashisaabuge_Gavaaidhu-2013_R-4.pdf; 
				
		replace year = .d if year == .b | year == .c
		label define year2 .a "info on legal basis missing"  ///
						  .d "info on legal basis not detailed enough for a quick google search"
		label values year year2
		
	*-----------------------------------*
	* Tidy dataset
	*-----------------------------------*
		
		* Remove helper variables
			drop  any_number countryname_for_merge year_short
		
		* Code an age variables
			gen age = 2020 - year
			
		* label
			label var year "year of most recent legislation"
		
	

*********************************************************************************
* 2. clean data (history)
*********************************************************************************
		
		rename briefhistoryandotherrelevant history
		
	*------------------------*
	* Full years (e.g., 1999)
	*--------------...-------*
	
		* Check for full years in the history text field.
			forvalue year = 1500(1)2020 {
				
				qui gen year_first_activity_`year' = .
				local N = _N

				forvalues i = 1/`N' {
					if ((regexm(history[`i'],"`year'")) == 1) {
						qui replace year_first_activity_`year' = `year' in `i'
					}
				}
			}
			
		* Take the latest year. 
			egen year_first_activity = rowmin(year_*)
			label var year_first_activity "year of first statistical activity"
		
		* Eyeball if it looks correct.
			order countryname legalbasis year
			br  // lowest year often refers to a census or registry, not the establishment 
				// of the NSO; e.g. US mentions 1600 but not founding of NSO.
			

		* Drop helper variable
			drop year_first_activity_*
				
*********************************************************************************
* 3. Export data & merge in in manual review
*********************************************************************************
	
	sort countryname
	rename legalbasis unsd_legalbasis
	rename history unsd_history
	preserve
	keep countryname year unsd_legalbasis unsd_year paris21_stat_legistlation_text paris21_year unsd_history year_first_activity
	order countryname year unsd_legalbasis unsd_year paris21_stat_legistlation_text paris21_year unsd_history year_first_activity
	export excel using "data/statistical_acts_dates", firstrow(variables) replace
		
	* Merge dataset back in after the year of the statistical act was manually 
	* reviewed for each country (i.e. manual comparison of text with extrated date)
	import excel "data/statistical_acts_dates_manual_review.xls", sheet("Sheet1") firstrow clear
	tempfile manual_review
	save `manual_review', replace
	restore
	merge 1:1 countryname using `manual_review', keepusing(manual_review_done manual_correction)
	replace year = manual_correction if manual_review_done == 1 & !missing(manual_correction)
	
*********************************************************************************
* 4. Visualize & descriptive stats (exploratory)
*********************************************************************************
	
	* The graph included in the report was produced with R – see R script in same folder
	
	* Latest statistical act
	
	tab year, m

	count if missing(year)
	local N_missing `r(N)'
	
	count if !missing(year)
	local N_not_missing `r(N)'
	
	/* hist year, discrete frequency ///
				title("Year of Latest Statistical Act") /// 
				ytitle("Number of countries") ///
				xtitle("Year") ///
				caption("N = `N_not_missing', Missing = `N_missing' ") ///
				xlabel(1940(5)2020,  gmax angle(45))  

	graph export "histogram_years.pdf", replace */
	
	* First statistical activity

	tab year_first_activity, m

	count if missing(year_first_activity)
	local N_missing `r(N)'
	
	count if !missing(year_first_activity)
	local N_not_missing `r(N)'
	
	hist year_first_activity, discrete frequency ///
				title("Year of First Statistical Activity (cenusus, founding NSO, etc.)", size(medium)) /// 
				ytitle("Number of countries") ///
				xtitle("Year") ///
				caption("N = `N_not_missing', Missing = `N_missing' ") ///
				xlabel(1500(50)2020,  gmax angle(45))  

	graph export "output_exploratory/histogram_year_first_activity_all_years.pdf", replace 
	
*********************************************************************************
* 5. Merge in other datasets 
*********************************************************************************
	
	rename countryname countryname_un
	tempfile master
	save `master'
	
	* I - INCOME GROUPS AND REGIONS (WDI/WB dataset)
		* use "data/WBGDP.dta", clear
		* import delimited "data/WDIData.csv", varnames(1) encoding(UTF-8) clear 
local base_year 2016
		
		* Import data from WDI and reshape to long (WDI data downloaded July 7, 2020)
		wbopendata, indicator(NY.GDP.PCAP.CD; SP.POP.TOTL)  year(`base_year') clear
		save "data/wbopendata_download_`base_year'", replace // save downloaded data to create record
		gen var_name = "GDPpc" if indicatorname == "GDP per capita (current US$)"
		replace var_name = "Pop" if indicatorname == "Population, total"
		drop indicatorname indicatorcode
		reshape wide yr`base_year', i(countryname) j(var_name) string
		rename yr`base_year'* *
		recast str3 countrycode
		drop if countrycode == "INX"
		tempfile wdi
		save `wdi'
		
		* Merge in incomelevel classification
		import delimited "data/WDICountry.csv", varnames(1) encoding(UTF-8) clear
		rename region regionname
		rename incomegroup incomelevelname
		gen 	incomelevel = "HIC" if incomelevelname == "High income"
		replace incomelevel = "LIC" if incomelevelname == "Low income"
		replace incomelevel = "UMC" if incomelevelname == "Upper middle income"
		replace incomelevel = "LMC" if incomelevelname == "Lower middle income"
		replace incomelevel = "NA" if incomelevelname == ""
		recast str3 countrycode, force 
		drop if countrycode == "- C"
		drop if countrycode == "Cou" 
		drop if countrycode == "For" 
		keep countrycode incomelevelname incomelevel regionname
		tempfile wdi_incomeclassification
		save `wdi_incomeclassification'
		
		use `wdi'
		merge 1:1 countrycode using `wdi_incomeclassification'
		assert _merge == 3
		drop _merge
		
		* Rename to merge with UN dataset (could have used matchit or reclink..)
		rename countryname countryname_wb
		gen countryname_un = countryname_wb
		replace countryname_un = "Bahamas" if countryname_wb == "Bahamas, The"
		replace countryname_un = "Cape Verde" if countryname_wb == "Cabo Verde"
		replace countryname_un = "China, Hong Kong SAR" if countryname_wb == "Hong Kong SAR, China"
		replace countryname_un = "China, Macao SAR" if countryname_wb == "Macao SAR, China"
		replace countryname_un = "Democratic Republic of the Congo" if countryname_wb == "Congo, Dem. Rep."
		replace countryname_un = "Congo" if countryname_wb == "Congo, Rep."
		replace countryname_un = "Democratic People's Republic of Korea" if countryname_wb == "Korea, Dem. People’s Rep."
		replace countryname_un = "Republic of Korea" if countryname_wb == "Korea, Rep."
		replace countryname_un = "Egypt" if countryname_wb == "Egypt, Arab Rep."
		replace countryname_un = "Gambia" if countryname_wb == "Gambia, The"
		replace countryname_un = "Iran (Islamic Republic of)" if countryname_wb == "Iran, Islamic Rep."
		replace countryname_un = "Kyrgyzstan" if countryname_wb == "Kyrgyz Republic"
		replace countryname_un = "Lao People's Democratic Republic" if countryname_wb == "Lao PDR"
		replace countryname_un = "Micronesia (Federal States of)" if countryname_wb == "Micronesia, Fed. Sts."
		replace countryname_un = "Republic of Moldova" if countryname_wb == "Moldova"
		replace countryname_un = "Republic of Montenegro" if countryname_wb == "Montenegro"
		replace countryname_un = "Republic of Serbia" if countryname_wb == "Serbia"
		replace countryname_un = "Saint Kitts and Nevis" if countryname_wb == "St. Kitts and Nevis"
		replace countryname_un = "Saint Lucia" if countryname_wb == "St. Lucia"
		replace countryname_un = "Saint Vincent and the Grenadines" if countryname_wb == "St. Vincent and the Grenadines"
		replace countryname_un = "Slovakia" if countryname_wb == "Slovak Republic"
		replace countryname_un = "Swaziland" if countryname_wb == "Eswatini"
		replace countryname_un = "The former Yugoslav Republic of Macedonia" if countryname_wb == "North Macedonia"
		replace countryname_un = "United Republic of Tanzania" if countryname_wb == "Tanzania"
		replace countryname_un = "United States of America" if countryname_wb == "United States"
		replace countryname_un = "Venezuela" if countryname_wb == "Venezuela, RB"
		replace countryname_un = "Occupied Palestinian Territory" if countryname_wb == "West Bank and Gaza"
		replace countryname_un = "Viet Nam, Socialist Republic of" if countryname_wb == "Vietnam"
		replace countryname_un = "Yemen" if countryname_wb == "Yemen, Rep."
		replace countryname_un = "Libyan Arab Jamahiriya" if countryname_wb == "Libya"
		
		save `wdi', replace
		
		use `master', clear
		merge 1:1 countryname_un using `wdi', gen(merge_wb)

			* All countries in the master datset were merged with the WB dataset
			* exept the following three countries which are not included in the WB
			* dataset (successful merge)
			if merge_wb == 1 { 
				assert (countryname_un == "Anguilla" | ///
						countryname_un == "Netherlands Antilles" | ///
						countryname_un == "Niue"))
						}
				
		save `master', replace

	* II - SPI
		import delimited "data/SPI_scores_long_labelled.csv", encoding(UTF-8) clear 
		rename digitcountrycode countrycode
		keep if date == `base_year' // keep base year
		tempfile spi
		save `spi'
		
		use `master', clear
			* Insert placeholder countrycode to make data unique FOLLOW-UP
			gen placeholder = _n
			tostring placeholder, replace
			replace countrycode = placeholder if missing(countrycode)
		
		merge 1:1 countrycode using `spi', gen(merge_spi)
			
			assert merge_spi != 2
			* All data from SPI merged. There are many unmerged from master as
			* SPI doesn't cover rich countries.
				* br if merge_wb  == 3 & merge_spi != 3
				
		save `master', replace		
				
	* III - ODIN
		import excel "data/ODIN_`base_year'_weighted_transpose.xlsx", sheet("03282020-2") firstrow case(lower) clear
		keep if datacategories == "All Categories" // look at data from all sectors for now
		
		rename year odin_year
		
		tempfile odin
		save `odin'
		
		use `master', clear
		replace countrycode = "AIA" if countryname_un == "Anguilla"
		merge 1:1 countrycode using `odin', gen(merge_odin)
		
			* Taiwan is not included in the UNSD country profiles. Thus,
			* there is one observation from using unused. 
			if merge_odin == 2 {
				assert country == "Taiwan"
			}
		
			* The unmatched observation from master are country categories or small 
			* (island) states.
				* br if merge_odin  == 1
				
	* EXPORT DATA FOR DATA VIZ IN R.
	
		* Simplify missing year label for publishing data
		replace year = .e if year == .d | year == .a
		label define year3 .e "year missing"
		label values year year3
	
		preserve
		local unsd_and_paris21 countryname_un countryname_wb countrycode age year unsd_year unsd_legalbasis paris21_year  paris21_stat_legistlation_text year_first_activity unsd_history
		local odin opennesssubscore machinereadable nonproprietary downloadoptions termsofuse metadataavailable overallscore
		local spi  dimension4disseminationpractices spioverallscore dimension4nsohasanadvancerelease dimension4nsohasalistingofsurvey dimension4nsohasadataportal dimension4timeseriesindicatorsar dimension4metadataisavailablepro dimension4nsohasconductedausersa dimension4geospatialdataavailabl 
		local wdi Pop GDPpc incomelevel incomelevelname regionname
		
		* add source prefix (where possible; spi names too long)
		foreach var of varlist `odin' {
			rename `var' odin_`var'
		}	
		
		foreach var of varlist `wdi' {
			rename `var' wdi_`var'
		}	
		
		keep `unsd_and_paris21' odin_* `spi' wdi_*
		order `unsd_and_paris21' odin_* `spi' wdi_*
		export excel using "data/statistal_acts_data_for_viz_in_r", firstrow(variables) replace // dataset for general data viz in R
	
		keep year countryname_un wdi_incomelevelname age wdi_GDPpc odin_overallscore spioverallscore dimension4disseminationpractices
		export excel using "data/age_and_openness_data_MASTER", firstrow(variables) replace // dataset that only inlcudes variables used in MASTER graph (and countryname)

		restore

			
*********************************************************************************
* 6. Visualize & Regressions
*********************************************************************************		
		
	* The graph included in the report was produced with R – see R script in same folder.
	
	* The following graphs and regressions are exploratory.
		
	*------------------*
	* ODIN indicators
	*------------------*
	
		* Relevant variables
			* opennesssubscore overallscore
			local odin_sub_ind_open machinereadable nonproprietary downloadoptions termsofuse metadataavailable  
			local odin_sub_coverage dataavailablelast10years dataavailablelast5years
		
		* Openness subindicator scatter plot
		count if !missing(age) & !missing(opennesssubscore)
		local N `r(N)'
		
		reg opennesssubscore age [pweight=Pop]
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter opennesssubscore age [pweight=Pop], msymbol(circle_hollow) mcolor(navy%60)|| ///
				lfit opennesssubscore age [pweight=Pop], ///
				title("ODIN Openness Subscore (population weighted)", size(medium)) ///
				legend(label(1 "ODIN Openness Subscore") label(2 "OLS (population weighted)"))  ///
				caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
		graph export "output_exploratory/age_odin_opennesssub_weighted.pdf", replace 

		reg opennesssubscore age
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter opennesssubscore age, jitter(0.5) msize(tiny) mcolor(navy%50)|| ///
				lfit opennesssubscore age, ///
				title("ODIN Openness Subscore (unweighted)", size(medium)) ///
				legend(label(1 "ODIN Openness Subscore") label(2 "OLS"))  ///
				caption("age = 2020 - year of last law change" "N = `N',  regression coefficient = `coef'")
		graph export "output_exploratory/age_odin_opennesssub_unweighted.pdf", replace 
		reg opennesssubscore age 
		
		* Loop over subindicators and scatter plot
		foreach var in `odin_sub_ind_open' `odin_sub_coverage' overallscore {
			count if !missing(age) & !missing(`var')
			local N `r(N)'
			
			reg `var' age [pweight=Pop]
			matrix define X = r(table)
			local coef = X[1,1]
			local coef: di  %7.2f `coef'
			twoway  scatter `var' age [pweight=Pop], msymbol(circle_hollow) mcolor(navy%60)|| ///
					lfit `var' age [pweight=Pop], ///
					title("ODIN `var' (population weighted)", size(medium)) ///
					legend(label(1 "ODIN `var'") label(2 "OLS (population weighted)"))  ///
					caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
			graph export "output_exploratory/age_odin_`var'_pweighted.pdf", replace 
			
			reg `var' age
			matrix define X = r(table)
			local coef = X[1,1]
			local coef: di  %7.2f `coef'
			twoway  scatter `var' age, jitter(0.5) msize(tiny) mcolor(navy%50)|| ///
					lfit `var' age, ///
					title("ODIN `var' (unweighted)", size(medium)) ///
					legend(label(1 "ODIN `var'") label(2 "OLS"))  ///
					caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
			graph export "output_exploratory/age_odin_`var'_unweighted.pdf", replace 
		}
		
					local odin_sub_ind_open machinereadable nonproprietary downloadoptions termsofuse metadataavailable  
			local odin_sub_coverage dataavailablelast10years dataavailablelast5years
		
		
		eststo Q: reg age `odin_sub_ind_open' `odin_sub_coverage'
		local i 1
		foreach var of varlist `odin_sub_ind_open' `odin_sub_coverage' {
			eststo R`i': reg `var' age GDPpc
			eststo S`i': reg `var' age GDPpc [pweight = Pop]
			local ++i
		}
		
		esttab Q using "output_exploratory/odin1.rtf", replace	
		esttab R* using "output_exploratory/odin2.rtf", replace	
		esttab S* using "output_exploratory/odin3.rtf", replace	
		
	*------------------*
	* SPI indicators
	*------------------*

		* "SPI Dimension 4: Dissemination Practices and Openness (DPO)" seems
		* to be most relevant.
		
		count if !missing(age) & !missing(dimension4disseminationpractices)
		local N `r(N)'
		
		* Dimension 4 score
		reg dimension4disseminationpractices age [pweight=Pop]
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter dimension4disseminationpractices age [pweight=Pop], msymbol(circle_hollow) mcolor(navy%60)|| ///
				lfit dimension4disseminationpractices age [pweight=Pop], ///
				title("SPI Dimension 4: Dissemination Practices and Openness (DPO)", size(medium)) ///
				legend(label(1 "DPO score") label(2 "OLS (population weighted)"))  ///
				caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
		graph export "output_exploratory/age_spi_dimension4_weighted.pdf", replace 
		
		reg dimension4disseminationpractices age
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter dimension4disseminationpractices age, jitter(0.5) msize(tiny) mcolor(navy%30) || ///
				lfit dimension4disseminationpractices age, ///
				title("SPI Dimension 4: Dissemination Practices and Openness (DPO)", size(medium)) ///
				legend(label(1 "DPO score") label(2 "OLS"))  ///
				caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
		graph export "output_exploratory/age_spi_dimension4_unweighted.pdf", replace 
		
		* SPI Total score
		reg spioverallscore age [pweight=Pop]
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter spioverallscore age [pweight=Pop], msymbol(circle_hollow) mcolor(navy%60)|| ///
				lfit spioverallscore age [pweight=Pop], ///
				title("SPI Overall Score", size(medium)) ///
				legend(label(1 "SPI overall score") label(2 "OLS (population weighted)"))  ///
				caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
		graph export "output_exploratory/age_spi_total_weighted.pdf", replace 
		
		reg spioverallscore age
		matrix define X = r(table)
		local coef = X[1,1]
		local coef: di  %7.2f `coef'
		twoway  scatter spioverallscore age, jitter(0.5) msize(tiny) mcolor(navy%30) || ///
				lfit spioverallscore age, ///
				title("SPI Overall Score", size(medium)) ///
				legend(label(1 "SPI overall score") label(2 "OLS"))  ///
				caption("age = 2020 - year of last law change" "N = `N', regression coefficient = `coef'")
		graph export "output_exploratory/age_spi_total_unweighted.pdf", replace 
		
		local spi_sub_ind dimension4nsohasanadvancerelease dimension4nsohasalistingofsurvey dimension4nsohasadataportal dimension4timeseriesindicatorsar dimension4metadataisavailablepro dimension4nsohasconductedausersa dimension4geospatialdataavailabl 
		
		* Subindicators
		local i 1
		foreach var of varlist `spi_sub_ind' {
			graph hbar age, over(`var') ///
			blabel(total, format(%2.1f))  ///
			title("`var'", size(medium)) ///
			ytitle("") 
			graph save graph_`i', replace 
			local ++i		
		}
				
		graph combine graph_1.gph graph_2.gph graph_3.gph /// 
					  graph_4.gph graph_5.gph graph_6.gph ///
					  graph_7.gph, ///
			xcommon ycommon ///
			l1title("", size(small)) ///
			b1title("mean age", size(small)) ///
			iscale(0.45) ///
			imargin(tiny) ///
			title("SPI Dimension 4: Dissemination Practices and Openness (DPO) – Subindicators", size(small))  ///
			cols(1) ///
			caption("age = 2020 - year of last law change" "N = `N'")
		graph export "output_exploratory/age_spi_dimension4_subindicators.pdf", replace
		
		local spi_sub_ind dimension4nsohasanadvancerelease dimension4nsohasalistingofsurvey dimension4nsohasadataportal dimension4timeseriesindicatorsar dimension4metadataisavailablepro dimension4nsohasconductedausersa dimension4geospatialdataavailabl 
		
		eststo A: reg age `spi_sub_ind'
		eststo A2: reg age GDPpc `spi_sub_ind' 
		eststo B: reg dimension4nsohasadataportal age  
		eststo C: reg dimension4nsohasadataportal age GDPpc [pweight = Pop]
		
		eststo D: reg age `spi_sub_ind' [pweight = Pop]		
		eststo D2: reg age GDPpc `spi_sub_ind' [pweight = Pop]		
		eststo E: reg dimension4nsohasadataportal age  [pweight = Pop]
		eststo F: reg dimension4nsohasadataportal age GDPpc [pweight = Pop]
		
		esttab A A2 D D2 using "output_exploratory/spi1.rtf", replace	
		esttab B C E F using "output_exploratory/spi2.rtf", replace	
					
	
	* Age by income group
	
		count if !missing(age) & !missing(incomelevel)
		local N `r(N)'
	
		encode incomelevel, gen(incomelevel_num)
		recode incomelevel_num (2 = 1) (3 = 2) (5 = 3) (1 = 4) (nonmissing = 5)
	
		graph hbar age, over(incomelevel,sort(incomelevel_num)) nofill ///
			blabel(total, format(%2.1f)) ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by income group", size(medium))
		graph export "output_exploratory/age_by_income_mean.pdf", replace 
	
		graph hbox age, over(incomelevel, sort(incomelevel_num)) nofill ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by income group", size(medium))
		graph export "output_exploratory/age_by_income_boxplot.pdf", replace 
		
		* Create table with pweighted means
		gen income_group_summary = ""
		gen age_mean_pweight_pop = .
		
		local i 1
		levelsof incomelevel
		foreach level in `r(levels)' {
			replace income_group_summary = "`level'" in `i'
			count if incomelevel == "`level'" & !missing(age)
			if `r(N)' > 0 {
				mean age [pweight = Pop] if incomelevel == "`level'"
				matrix define X = r(table)		
				replace age_mean_pweight_pop = X[1,1] in `i'
			}
			local ++i
		}
		
		encode income_group_summary, gen(income_group_summary_num)
		recode income_group_summary_num (2 = 1) (3 = 2) (5 = 3) (1 = 4) (nonmissing = 5)
	
		graph hbar age_mean_pweight_pop, over(income_group_summary, sort(income_group_summary_num)) nofill ///
			blabel(total, format(%2.1f)) ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by income group (population weighted means)", size(medium))

		graph export "output_exploratory/age_by_income_mean_pop_weight.pdf", replace 
	
		
	* Age by region
		count if !missing(age) & !missing(regionname)
		local N `r(N)'
	
		graph hbar age, over(regionname) nofill ///
			blabel(total, format(%2.1f)) ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by region (unweighted)", size(medium))
		graph export "output_exploratory/age_by_region_mean.pdf", replace 
	
		graph hbox age, over(regionname) nofill ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by region", size(medium))
		graph export "output_exploratory/age_by_region_boxplot.pdf", replace 
		
		* Create table with weighted means
		capture drop income_group_summary age_mean_pweight_pop
		capture drop region_summary age_mean_pweight_pop
		gen region_summary = ""
		gen age_mean_pweight_pop = .
		
		local i 1
		levelsof regionname
		foreach region in `r(levels)' {
			replace region_summary = "`region'" in `i'
			count if regionname == "`region'" & !missing(age)
			if `r(N)' > 0 {
				mean age [pweight = Pop] if regionname == "`region'"
				matrix define X = r(table)		
				replace age_mean_pweight_pop = X[1,1] in `i'
			}
			local ++i
		}
		
		graph hbar age_mean_pweight_pop, over(region_summary) nofill ///
			blabel(total, format(%2.1f)) ///
			caption("age = 2020 - year of last law change" "N = `N'") ///
			title("Years since last law change by region (population weighted means)", size(small))
		graph export "output_exploratory/age_by_region_mean_pop_weight.pdf", replace 
	

	*------------------------------------------*
	* Further exploratory regression analysis
	*------------------------------------------*
	
		rename overallscore odinoverallscore
		rename opennesssubscore odinopennesssubscore
		* Regressions
		eststo L1: reg odinoverallscore age // ODIN overall score
		eststo L2: reg odinoverallscore age GDPpc			
		eststo L3: reg odinopennesssubscore age // ODIN openness score
		eststo L4: reg odinopennesssubscore age GDPpc		
		eststo L5: reg spioverallscore age // SPI overall score
		eststo L6: reg spioverallscore age GDPpc
		eststo L7: reg dimension4disseminationpractices age // SPI subscore
		eststo L8: reg dimension4disseminationpractices age GDPpc		
		
		eststo K1: reg odinoverallscore age [pweight=Pop] // ODIN overall score
		eststo K2: reg odinoverallscore age GDPpc [pweight=Pop]				
		eststo K3: reg odinopennesssubscore age [pweight=Pop] // ODIN openness score
		eststo K4: reg odinopennesssubscore age GDPpc [pweight=Pop]		
		eststo K5: reg spioverallscore age [pweight=Pop] // SPI overall score
		eststo K6: reg spioverallscore age GDPpc [pweight=Pop]
		eststo K7: reg dimension4disseminationpractices age [pweight=Pop] // SPI subscore
		eststo K8: reg dimension4disseminationpractices age GDPpc [pweight=Pop]
		
		esttab L* using "output_exploratory/mixed_bag_unweighted.rtf", replace	
		esttab K* using "output_exploratory/mixed_bag_weighted.rtf", replace	
		
		* Correlation
		correlate age odinoverallscore odinopennesssubscore spioverallscore dimension4disseminationpractices GDPpc
		asdoc correlate age odinoverallscore odinopennesssubscore spioverallscore dimension4disseminationpractices GDPpc ///
				, nonum replace save(output_exploratory/correlation_matrix_unweighted.rtf)		
		rename odinoverallscore overallscore
		rename odinopennesssubscore opennesssubscore 

	
* END OF DO-FILE *		
		
	
